name: C/C++ CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: "Android (Ubuntu)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'oracle'

      - name: Assemble APK debug
        run: |
          cd build/android
          chmod +x ./gradlew
          ./gradlew assembleDebug

  cmake-build:
      strategy:
        fail-fast: false
        matrix:
          config:
          - {
              name: "Windows - MSVC 2022",
              os: windows-latest,
              build_type: "Debug",
              cc: "cl",
              cxx: "cl",
              generators: "Visual Studio 17 2022",
              cmake_args: "-DIGL_WITH_TRACY=ON -DIGL_WITH_TESTS=ON"
            }
          - {
              name: "Windows - MSVC 2022 (no OpenGL)",
              os: windows-latest,
              build_type: "Debug",
              cc: "cl",
              cxx: "cl",
              generators: "Visual Studio 17 2022",
              cmake_args: "-DIGL_WITH_TRACY=ON -DIGL_WITH_TESTS=ON -DIGL_WITH_OPENGL=OFF"
            }
          - {
              name: "Ubuntu - Clang",
              os: ubuntu-latest,
              build_type: "Debug",
              cc: "clang",
              cxx: "clang++",
              generators: "Unix Makefiles",
              cmake_args: "-DIGL_WITH_TRACY=ON"
            }
          - {
              name: "Ubuntu - GCC",
              os: ubuntu-latest,
              build_type: "Debug",
              cc: "gcc",
              cxx: "g++",
              generators: "Unix Makefiles",
              # TODO: Fix killing GCC process on Github CI when IGL_WITH_SHELL is ON.
              cmake_args: "-DIGL_WITH_TRACY=ON -DIGL_WITH_SHELL=OFF"
            }
# https://github.com/emscripten-core/emscripten/pull/20802#issuecomment-1858114093
#          - {
#              name: "Emscripten (Ubuntu)",
#              os: ubuntu-latest,
#              build_type: "Debug",
#              cc: "emcc",
#              cxx: "em++",
#              generators: "Ninja",
#          }
          - {
              name: "macOS - Clang (Xcode)",
              os: macos-latest,
              build_type: "Debug",
              cc: "clang",
              cxx: "clang++",
              generators: "Xcode",
              cmake_args: "-DIGL_WITH_VULKAN=OFF"
            }
          - {
              name: "macOS - Clang (Unix Makefiles)",
              os: macos-latest,
              build_type: "Debug",
              cc: "clang",
              cxx: "clang++",
              generators: "Unix Makefiles",
              cmake_args: "-DIGL_WITH_VULKAN=OFF"
            }
      runs-on: ${{ matrix.config.os }}

      steps:
        - uses: actions/checkout@v4
          with:
            submodules: recursive

        - if: startsWith(matrix.config.name, 'Emscripten')
          run: |
            sudo sed -i 's/azure\.//' /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y clang emscripten xorg-dev libxinerama-dev libxcursor-dev libgles2-mesa-dev libegl1-mesa-dev libglfw3-dev libglew-dev libstdc++-12-dev

        - if: startsWith(matrix.config.name, 'Ubuntu' )
          run: |
            sudo sed -i 's/azure\.//' /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y clang xorg-dev libxinerama-dev libxcursor-dev libgles2-mesa-dev libegl1-mesa-dev libglfw3-dev libglew-dev libstdc++-12-dev

        - name: Prepare Vulkan SDK
          uses: humbletim/setup-vulkan-sdk@523828e49cd4afabce369c39c7ee6543a2b7a735
          with:
            vulkan-query-version: 1.3.268.0
            vulkan-components: Vulkan-Headers, Vulkan-Loader, SPIRV-Headers
            vulkan-use-cache: true

        - name: Get the number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - name: Build
          shell: bash
          env:
            CC:  ${{ matrix.config.cc }}
            CXX: ${{ matrix.config.cxx }}
          if: ${{ matrix.config.name  != 'Emscripten (Ubuntu)' }}
          run: |
            cmake ${{ env.CMAKE_GENERATOR }} -S "${{ github.workspace }}" -B build ${{ matrix.config.cmake_args }}
            cd build
            cmake --build . --parallel ${{ steps.cpu-cores.outputs.count }}

        - name: Build Emscripten
          shell: bash
          env:
            CC:  ${{ matrix.config.cc }}
            CXX: ${{ matrix.config.cxx }}
          if: ${{ matrix.config.name  == 'Emscripten (Ubuntu)' }}
          run: |
            emcmake cmake ${{ env.CMAKE_GENERATOR }} -S "${{ github.workspace }}" -B build ${{ matrix.config.cmake_args }}
            cd build
            cmake --build . --parallel ${{ steps.cpu-cores.outputs.count }}
